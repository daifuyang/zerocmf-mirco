// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemLogFieldNames          = builder.RawFieldNames(&SystemLog{})
	systemLogRows                = strings.Join(systemLogFieldNames, ",")
	systemLogRowsExpectAutoSet   = strings.Join(stringx.Remove(systemLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	systemLogRowsWithPlaceHolder = strings.Join(stringx.Remove(systemLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSystemLogIdPrefix = "cache:systemLog:id:"
)

type (
	systemLogModel interface {
		Where(query string, args ...interface{}) *defaultSystemLogModel
		Limit(limit int) *defaultSystemLogModel
		Offset(offset int) *defaultSystemLogModel
		OrderBy(query string) *defaultSystemLogModel
		First(ctx context.Context) (*SystemLog, error)
		Find(ctx context.Context) ([]*SystemLog, error)
		Count(ctx context.Context) (int64, error)
		Insert(ctx context.Context, data *SystemLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemLog, error)
		Update(ctx context.Context, data *SystemLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemLogModel struct {
		sqlc.CachedConn
		table     string
		query     string
		queryArgs []interface{}
		limit     int
		offset    int
		orderBy   string
	}

	SystemLog struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		AppName   string    `db:"app_name"` // 应用名称
		LogLevel  string    `db:"logLevel"` // 日志级别，如 INFO、ERROR、WARNING 等
		Method    string    `db:"method"`   // 日志发生所在方法
		Message   string    `db:"message"`  // 日志消息
	}
)

func newSystemLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSystemLogModel {
	return &defaultSystemLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`system_log`",
	}
}

func (m *defaultSystemLogModel) withSession(session sqlx.Session) *defaultSystemLogModel {
	return &defaultSystemLogModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`system_log`",
	}
}

func (m *defaultSystemLogModel) Where(query string, args ...interface{}) *defaultSystemLogModel {
	m.query = query
	m.queryArgs = args
	return m
}

func (m *defaultSystemLogModel) Limit(limit int) *defaultSystemLogModel {
	m.limit = limit
	return m
}

func (m *defaultSystemLogModel) Offset(offset int) *defaultSystemLogModel {
	m.offset = offset
	return m
}

func (m *defaultSystemLogModel) OrderBy(orderBy string) *defaultSystemLogModel {
	m.orderBy = orderBy
	return m
}
func (m *defaultSystemLogModel) Delete(ctx context.Context, id int64) error {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, systemLogIdKey)
	return err
}

func (m *defaultSystemLogModel) FindOne(ctx context.Context, id int64) (*SystemLog, error) {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, id)
	var resp SystemLog
	err := m.QueryRowCtx(ctx, &resp, systemLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", systemLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemLogModel) Insert(ctx context.Context, data *SystemLog) (sql.Result, error) {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, systemLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AppName, data.LogLevel, data.Method, data.Message)
	}, systemLogIdKey)
	return ret, err
}

func (m *defaultSystemLogModel) Update(ctx context.Context, data *SystemLog) error {
	systemLogIdKey := fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AppName, data.LogLevel, data.Method, data.Message, data.Id)
	}, systemLogIdKey)
	return err
}

// 根据条件进行查询一条数据
func (m *defaultSystemLogModel) First(ctx context.Context) (*SystemLog, error) {
	query := m.query

	queryArgs := m.queryArgs
	orderBy := m.orderBy
	var resp SystemLog
	sql := fmt.Sprintf("select %s from %s", systemLogRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	sql += " AND deleted_at = 0 limit 1"

	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据条件进行列表查询
func (m *defaultSystemLogModel) Find(ctx context.Context) ([]*SystemLog, error) {

	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy

	var resp []*SystemLog
	sql := fmt.Sprintf("select %s from %s", systemLogRows, m.table)

	if query != "" {
		sql += " where " + query + " AND deleted_at = 0"
	} else {
		sql += " where deleted_at = 0"
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	limit := m.limit
	offset := m.offset

	// 查询条件
	if limit > 0 {
		sql += fmt.Sprintf(" LIMIT %d", limit)
	}

	if offset > 0 {
		sql += fmt.Sprintf(" OFFSET %d", offset)
	}

	err := m.QueryRowsNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 统计字段
func (m *defaultSystemLogModel) Count(ctx context.Context) (int64, error) {
	query := m.query
	queryArgs := m.queryArgs
	sql := fmt.Sprintf("select count(`id`) from %s", m.table)
	if query != "" {
		sql += " where " + query
	}
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}
func (m *defaultSystemLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSystemLogIdPrefix, primary)
}

func (m *defaultSystemLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", systemLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSystemLogModel) tableName() string {
	return m.table
}
