// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	loginLogFieldNames          = builder.RawFieldNames(&LoginLog{})
	loginLogRows                = strings.Join(loginLogFieldNames, ",")
	loginLogRowsExpectAutoSet   = strings.Join(stringx.Remove(loginLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	loginLogRowsWithPlaceHolder = strings.Join(stringx.Remove(loginLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLoginLogIdPrefix = "cache:loginLog:id:"
)

type (
	loginLogModel interface {
		Where(query string, args ...interface{}) *defaultLoginLogModel
		Limit(limit int) *defaultLoginLogModel
		Offset(offset int) *defaultLoginLogModel
		OrderBy(query string) *defaultLoginLogModel
		First(ctx context.Context) (*LoginLog, error)
		Find(ctx context.Context) ([]*LoginLog, error)
		Count(ctx context.Context) (int64, error)
		Insert(ctx context.Context, data *LoginLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LoginLog, error)
		Update(ctx context.Context, data *LoginLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLoginLogModel struct {
		sqlc.CachedConn
		table     string
		query     string
		queryArgs []interface{}
		limit     int
		offset    int
		orderBy   string
	}

	LoginLog struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		UserId    int64     `db:"user_id"`  // 用户id
		Username  string    `db:"username"` // 用户名
		Status    string    `db:"status"`   // 登录状态（online:在线，登录初始状态，方便统计在线人数；login:退出登录后将online置为login；logout:退出登录）
		Ip        string    `db:"ip"`       // IP地址
	}
)

func newLoginLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLoginLogModel {
	return &defaultLoginLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`login_log`",
	}
}

func (m *defaultLoginLogModel) withSession(session sqlx.Session) *defaultLoginLogModel {
	return &defaultLoginLogModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`login_log`",
	}
}

func (m *defaultLoginLogModel) Where(query string, args ...interface{}) *defaultLoginLogModel {
	m.query = query
	m.queryArgs = args
	return m
}

func (m *defaultLoginLogModel) Limit(limit int) *defaultLoginLogModel {
	m.limit = limit
	return m
}

func (m *defaultLoginLogModel) Offset(offset int) *defaultLoginLogModel {
	m.offset = offset
	return m
}

func (m *defaultLoginLogModel) OrderBy(orderBy string) *defaultLoginLogModel {
	m.orderBy = orderBy
	return m
}
func (m *defaultLoginLogModel) Delete(ctx context.Context, id int64) error {
	loginLogIdKey := fmt.Sprintf("%s%v", cacheLoginLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, loginLogIdKey)
	return err
}

func (m *defaultLoginLogModel) FindOne(ctx context.Context, id int64) (*LoginLog, error) {
	loginLogIdKey := fmt.Sprintf("%s%v", cacheLoginLogIdPrefix, id)
	var resp LoginLog
	err := m.QueryRowCtx(ctx, &resp, loginLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", loginLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoginLogModel) Insert(ctx context.Context, data *LoginLog) (sql.Result, error) {
	loginLogIdKey := fmt.Sprintf("%s%v", cacheLoginLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, loginLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Username, data.Status, data.Ip)
	}, loginLogIdKey)
	return ret, err
}

func (m *defaultLoginLogModel) Update(ctx context.Context, data *LoginLog) error {
	loginLogIdKey := fmt.Sprintf("%s%v", cacheLoginLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, loginLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Username, data.Status, data.Ip, data.Id)
	}, loginLogIdKey)
	return err
}

// 根据条件进行查询一条数据
func (m *defaultLoginLogModel) First(ctx context.Context) (*LoginLog, error) {
	query := m.query

	queryArgs := m.queryArgs
	orderBy := m.orderBy
	var resp LoginLog
	sql := fmt.Sprintf("select %s from %s", loginLogRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	sql += " AND deleted_at = 0 limit 1"

	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据条件进行列表查询
func (m *defaultLoginLogModel) Find(ctx context.Context) ([]*LoginLog, error) {

	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy

	var resp []*LoginLog
	sql := fmt.Sprintf("select %s from %s", loginLogRows, m.table)

	if query != "" {
		sql += " where " + query + " AND deleted_at = 0"
	} else {
		sql += " where deleted_at = 0"
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	limit := m.limit
	offset := m.offset

	// 查询条件
	if limit > 0 {
		sql += fmt.Sprintf(" LIMIT %d", limit)
	}

	if offset > 0 {
		sql += fmt.Sprintf(" OFFSET %d", offset)
	}

	err := m.QueryRowsNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 统计字段
func (m *defaultLoginLogModel) Count(ctx context.Context) (int64, error) {
	query := m.query
	queryArgs := m.queryArgs
	sql := fmt.Sprintf("select count(`id`) from %s", m.table)
	if query != "" {
		sql += " where " + query
	}
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}
func (m *defaultLoginLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLoginLogIdPrefix, primary)
}

func (m *defaultLoginLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", loginLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLoginLogModel) tableName() string {
	return m.table
}
