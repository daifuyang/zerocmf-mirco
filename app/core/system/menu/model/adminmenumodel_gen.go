// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminMenuFieldNames          = builder.RawFieldNames(&AdminMenu{})
	adminMenuRows                = strings.Join(adminMenuFieldNames, ",")
	adminMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(adminMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	adminMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(adminMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAdminMenuIdPrefix   = "cache:adminMenu:id:"
	cacheAdminMenuNamePrefix = "cache:adminMenu:name:"
)

type (
	adminMenuModel interface {
		Where(query string, args ...interface{}) *defaultAdminMenuModel
		Limit(limit int) *defaultAdminMenuModel
		Offset(offset int) *defaultAdminMenuModel
		OrderBy(query string) *defaultAdminMenuModel
		First(ctx context.Context) (*AdminMenu, error)
		Find(ctx context.Context) ([]*AdminMenu, error)
		Count(ctx context.Context) (int64, error)
		Insert(ctx context.Context, data *AdminMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminMenu, error)
		FindOneByName(ctx context.Context, name string) (*AdminMenu, error)
		Update(ctx context.Context, data *AdminMenu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminMenuModel struct {
		sqlc.CachedConn
		table     string
		query     string
		queryArgs []interface{}
		limit     int
		offset    int
		orderBy   string
	}

	AdminMenu struct {
		Id         int64     `db:"id"`
		ParentId   int64     `db:"parent_id"` // 上级id
		UserId     int64     `db:"user_id"`   // 创建人
		FormId     string    `db:"form_id"`   // 表单id
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
		DeletedAt  time.Time `db:"deleted_at"`
		MenuType   int64     `db:"menu_type"`    // 菜单类型（0：分组，1：菜单，2：表单，3：按钮）
		Name       string    `db:"name"`         // 菜单名称
		Icon       string    `db:"icon"`         // 菜单图标
		Path       string    `db:"path"`         // 路由地址
		Component  string    `db:"component"`    // 组件地址
		Access     string    `db:"access"`       // 权限字符
		Link       int64     `db:"link"`         // 是否外链：0：否，1：是
		Order      float64   `db:"order"`        // 排序，越大越靠前
		HideInMenu int64     `db:"hide_in_menu"` // 菜单中隐藏
		Status     int64     `db:"status"`       // 1 =>启用,0 => 停用
	}
)

func newAdminMenuModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAdminMenuModel {
	return &defaultAdminMenuModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`admin_menu`",
	}
}

func (m *defaultAdminMenuModel) withSession(session sqlx.Session) *defaultAdminMenuModel {
	return &defaultAdminMenuModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`admin_menu`",
	}
}

func (m *defaultAdminMenuModel) Where(query string, args ...interface{}) *defaultAdminMenuModel {
	m.query = query
	m.queryArgs = args
	return m
}

func (m *defaultAdminMenuModel) Limit(limit int) *defaultAdminMenuModel {
	m.limit = limit
	return m
}

func (m *defaultAdminMenuModel) Offset(offset int) *defaultAdminMenuModel {
	m.offset = offset
	return m
}

func (m *defaultAdminMenuModel) OrderBy(orderBy string) *defaultAdminMenuModel {
	m.orderBy = orderBy
	return m
}
func (m *defaultAdminMenuModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	adminMenuIdKey := fmt.Sprintf("%s%v", cacheAdminMenuIdPrefix, id)
	adminMenuNameKey := fmt.Sprintf("%s%v", cacheAdminMenuNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, adminMenuIdKey, adminMenuNameKey)
	return err
}

func (m *defaultAdminMenuModel) FindOne(ctx context.Context, id int64) (*AdminMenu, error) {
	adminMenuIdKey := fmt.Sprintf("%s%v", cacheAdminMenuIdPrefix, id)
	var resp AdminMenu
	err := m.QueryRowCtx(ctx, &resp, adminMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", adminMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminMenuModel) FindOneByName(ctx context.Context, name string) (*AdminMenu, error) {
	adminMenuNameKey := fmt.Sprintf("%s%v", cacheAdminMenuNamePrefix, name)
	var resp AdminMenu
	err := m.QueryRowIndexCtx(ctx, &resp, adminMenuNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? AND deleted_at = 0 limit 1", adminMenuRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminMenuModel) Insert(ctx context.Context, data *AdminMenu) (sql.Result, error) {
	adminMenuIdKey := fmt.Sprintf("%s%v", cacheAdminMenuIdPrefix, data.Id)
	adminMenuNameKey := fmt.Sprintf("%s%v", cacheAdminMenuNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.UserId, data.FormId, data.DeletedAt, data.MenuType, data.Name, data.Icon, data.Path, data.Component, data.Access, data.Link, data.Order, data.HideInMenu, data.Status)
	}, adminMenuIdKey, adminMenuNameKey)
	return ret, err
}

func (m *defaultAdminMenuModel) Update(ctx context.Context, newData *AdminMenu) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	adminMenuIdKey := fmt.Sprintf("%s%v", cacheAdminMenuIdPrefix, data.Id)
	adminMenuNameKey := fmt.Sprintf("%s%v", cacheAdminMenuNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (json sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ParentId, newData.UserId, newData.FormId, newData.DeletedAt, newData.MenuType, newData.Name, newData.Icon, newData.Path, newData.Component, newData.Access, newData.Link, newData.Order, newData.HideInMenu, newData.Status, newData.Id)
	}, adminMenuIdKey, adminMenuNameKey)
	return err
}

// 根据条件进行查询一条数据
func (m *defaultAdminMenuModel) First(ctx context.Context) (*AdminMenu, error) {
	query := m.query

	queryArgs := m.queryArgs
	orderBy := m.orderBy
	var resp AdminMenu
	sql := fmt.Sprintf("select %s from %s", adminMenuRows, m.table)

	if query != "" {
		sql += " where " + query
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	sql += " AND deleted_at = 0 limit 1"

	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 根据条件进行列表查询
func (m *defaultAdminMenuModel) Find(ctx context.Context) ([]*AdminMenu, error) {

	query := m.query
	queryArgs := m.queryArgs
	orderBy := m.orderBy

	var resp []*AdminMenu
	sql := fmt.Sprintf("select %s from %s", adminMenuRows, m.table)

	if query != "" {
		sql += " where " + query + " AND deleted_at = 0"
	} else {
		sql += " where deleted_at = 0"
	}

	// 排序
	if orderBy != "" {
		sql += fmt.Sprintf(" ORDER BY %s", orderBy)
	}

	limit := m.limit
	offset := m.offset

	// 查询条件
	if limit > 0 {
		sql += fmt.Sprintf(" LIMIT %d", limit)
	}

	if offset > 0 {
		sql += fmt.Sprintf(" OFFSET %d", offset)
	}

	err := m.QueryRowsNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// 统计字段
func (m *defaultAdminMenuModel) Count(ctx context.Context) (int64, error) {
	query := m.query
	queryArgs := m.queryArgs
	sql := fmt.Sprintf("select count(`id`) from %s", m.table)
	if query != "" {
		sql += " where " + query
	}
	var resp int64
	err := m.QueryRowNoCacheCtx(ctx, &resp, sql, queryArgs...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}
func (m *defaultAdminMenuModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAdminMenuIdPrefix, primary)
}

func (m *defaultAdminMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND deleted_at = 0 limit 1", adminMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdminMenuModel) tableName() string {
	return m.table
}
