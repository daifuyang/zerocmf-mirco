// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rpc/pb/menu.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_TreeList_FullMethodName = "/core.system.menu.rpc.v1.Service/TreeList"
	Service_Show_FullMethodName     = "/core.system.menu.rpc.v1.Service/Show"
	Service_Save_FullMethodName     = "/core.system.menu.rpc.v1.Service/Save"
	Service_Delete_FullMethodName   = "/core.system.menu.rpc.v1.Service/Delete"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// 获取菜单
	TreeList(ctx context.Context, in *TreeListReq, opts ...grpc.CallOption) (*TreeListResp, error)
	// 获取单个菜单
	Show(ctx context.Context, in *ShowReq, opts ...grpc.CallOption) (*ShowResp, error)
	// 保存菜单
	Save(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*SaveResp, error)
	// 删除菜单
	Delete(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*Response, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) TreeList(ctx context.Context, in *TreeListReq, opts ...grpc.CallOption) (*TreeListResp, error) {
	out := new(TreeListResp)
	err := c.cc.Invoke(ctx, Service_TreeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Show(ctx context.Context, in *ShowReq, opts ...grpc.CallOption) (*ShowResp, error) {
	out := new(ShowResp)
	err := c.cc.Invoke(ctx, Service_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Save(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*SaveResp, error) {
	out := new(SaveResp)
	err := c.cc.Invoke(ctx, Service_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Delete(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Service_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// 获取菜单
	TreeList(context.Context, *TreeListReq) (*TreeListResp, error)
	// 获取单个菜单
	Show(context.Context, *ShowReq) (*ShowResp, error)
	// 保存菜单
	Save(context.Context, *SaveReq) (*SaveResp, error)
	// 删除菜单
	Delete(context.Context, *SaveReq) (*Response, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) TreeList(context.Context, *TreeListReq) (*TreeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TreeList not implemented")
}
func (UnimplementedServiceServer) Show(context.Context, *ShowReq) (*ShowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedServiceServer) Save(context.Context, *SaveReq) (*SaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedServiceServer) Delete(context.Context, *SaveReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_TreeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TreeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_TreeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TreeList(ctx, req.(*TreeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Show(ctx, req.(*ShowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Save(ctx, req.(*SaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Delete(ctx, req.(*SaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.system.menu.rpc.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TreeList",
			Handler:    _Service_TreeList_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Service_Show_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Service_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Service_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/pb/menu.proto",
}
